<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.1.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 导入JDBC外部文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 注册数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 通过spring框架整合mybatis配置 : SqlSessionFactoryBean对象 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置mybatis核心文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 配置mybatis连接池(数据源) -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置数据库的sql文件的脚本 -->
        <property name="mapperLocations" value="classpath:com/jsoft/mapper/*.xml"/>
    </bean>

    <!-- 配置mybatis自动扫包(自动创建代理类对象) -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描的mapper包结构 -->
        <property name="basePackage" value="com.jsoft.mapper"/>
    </bean>

    <!--配置spring事务控制-->
    <!-- 1. 配置事务管理器对象，作用到指定数据源对象上 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 将事务作用在数据源上 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 2. 配置事务处理规则 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <!-- 配置事务属性 -->
        <!-- 任何方法只要产生异常都进行回滚操作，rollback-for 表示产生异常后进行回滚操作 -->
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
            <!-- 查询方法不使用事务 设置成只读即可 -->
            <tx:method name="find*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP -->
    <aop:config>
<!--        <aop:pointcut id="pc" expression="execution(* com.mh.ssm.service..*.*(..))"/>-->
<!--        <aop:advisor advice-ref="advice" pointcut-ref="pc"/>-->
    </aop:config>


</beans>